Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.5.281 Build 20190815

Compiler options: -I/opt/spack/opt/spack/linux-centos8-x86_64/gcc-8.3.1/intel-parallel-studio-cluster-2019.5-orx5jdz226xd547myyzyhe6qd6f7o7xo/compilers_and_libraries_2019.5.281/linux/mpi/intel64/include -Xlinker -rpath=/opt/spack/opt/spack/linux-centos8-x86_64/gcc-8.3.1/intel-parallel-studio-cluster-2019.5-orx5jdz226xd547myyzyhe6qd6f7o7xo/compilers_and_libraries_2019.5.281/linux/compiler/lib/intel64 -std=c++11 -qopenmp -O3 -xHost -qopt-report=5 -qopt-report-phase=vec -qopt-report-file=MemXCT-CPU/src/main.o.optrpt -c -o MemXCT-CPU/src/main.o

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(247,17)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(272,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between spatcount (274:27) and spatcount (275:7)
   remark #15346: vector dependence: assumed FLOW dependence between spatcount (275:7) and spatcount (274:27)
   remark #15346: vector dependence: assumed FLOW dependence between spatcount (275:7) and spatcount (274:27)
   remark #15346: vector dependence: assumed ANTI dependence between spatcount (274:27) and spatcount (275:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(272,3)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(281,17)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(306,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between speccount (308:27) and speccount (309:7)
   remark #15346: vector dependence: assumed FLOW dependence between speccount (309:7) and speccount (308:27)
   remark #15346: vector dependence: assumed FLOW dependence between speccount (309:7) and speccount (308:27)
   remark #15346: vector dependence: assumed ANTI dependence between speccount (308:27) and speccount (309:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(306,3)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(331,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between specstart[p] (333:5) and specstart[p-1] (333:5)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(331,3)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(335,3)
<Peeled loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(335,3)
<Distributed chunk1>
   remark #15388: vectorization support: reference numrays[p] has aligned access   [ MemXCT-CPU/src/main.cpp(337,5) ]
   remark #15389: vectorization support: reference numspecs[p] has unaligned access   [ MemXCT-CPU/src/main.cpp(337,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.286
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.750 
   remark #15478: estimated potential speedup: 3.730 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(335,3)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(335,3)
<Peeled loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(335,3)
<Distributed chunk2>
   remark #15388: vectorization support: reference numpixs[p] has aligned access   [ MemXCT-CPU/src/main.cpp(336,5) ]
   remark #15389: vectorization support: reference numspats[p] has unaligned access   [ MemXCT-CPU/src/main.cpp(336,18) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.286
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.750 
   remark #15478: estimated potential speedup: 3.730 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(335,3)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(341,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between pixstart[p] (342:5) and pixstart[p-1] (342:5)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(341,3)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(349,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(349,3)
   remark #15389: vectorization support: reference numpixs[p] has unaligned access   [ MemXCT-CPU/src/main.cpp(350,8) ]
   remark #15388: vectorization support: reference numrays[p] has aligned access   [ MemXCT-CPU/src/main.cpp(351,8) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 6.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 3.560 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(349,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(354,5)
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(355,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(452,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(471,5)
      remark #15523: loop was not vectorized: loop control variable k was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(476,5)
      remark #15523: loop was not vectorized: loop control variable k was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(487,3)
   remark #15523: loop was not vectorized: loop control variable p was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(500,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(540,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(540,5)
   remark #15388: vectorization support: reference rownz[k] has aligned access   [ MemXCT-CPU/src/main.cpp(541,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 8.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.130 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(540,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(544,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between rowdispl[k] (545:7) and rowdispl[k-1] (545:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(544,5)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(602,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between rowdispl[m] (603:7) and rowdispl[m-1] (603:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(602,5)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(605,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(605,5)
   remark #15388: vectorization support: reference rowdispl[k+1] has aligned access   [ MemXCT-CPU/src/main.cpp(606,19) ]
   remark #15389: vectorization support: reference rowdispl[k] has unaligned access   [ MemXCT-CPU/src/main.cpp(606,33) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.154
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 3.250 
   remark #15478: estimated potential speedup: 2.590 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(605,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(658,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between blockdispl[block] (659:7) and blockdispl[block-1] (659:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(658,5)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(662,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(662,5)
   remark #15388: vectorization support: reference blocknz[block] has aligned access   [ MemXCT-CPU/src/main.cpp(663,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 8.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.130 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(662,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(703,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between buffmapdispl[n] (704:7) and buffmapdispl[n-1] (704:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(703,5)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(711,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between buffdispl[n] (712:7) and buffdispl[n-1] (712:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(711,5)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(715,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(715,5)
   remark #15388: vectorization support: reference buffnz[n] has aligned access   [ MemXCT-CPU/src/main.cpp(716,22) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 8.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.130 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(715,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(807,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between blockdispl[block] (808:7) and blockdispl[block-1] (808:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(807,5)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(811,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(811,5)
   remark #15388: vectorization support: reference blocknz[block] has aligned access   [ MemXCT-CPU/src/main.cpp(812,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 8.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.130 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(811,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(852,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between buffmapdispl[n] (853:7) and buffmapdispl[n-1] (853:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(852,5)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(860,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between buffdispl[n] (861:7) and buffdispl[n-1] (861:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(860,5)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(864,5)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(864,5)
   remark #15388: vectorization support: reference buffnz[n] has aligned access   [ MemXCT-CPU/src/main.cpp(865,22) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 8.200
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 4.130 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(864,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(987,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between raynumray[*(rayrecvlist+k*4)] (988:5) and raynumray[*(rayrecvlist+k*4)] (988:5)
   remark #15346: vector dependence: assumed ANTI dependence between raynumray[*(rayrecvlist+k*4)] (988:5) and raynumray[*(rayrecvlist+k*4)] (988:5)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(987,3)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(991,3)
   remark #15523: loop was not vectorized: loop control variable k was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(996,3)
   remark #15523: loop was not vectorized: loop control variable k was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1113,5)
   remark #15523: loop was not vectorized: loop control variable iter was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(255,3)
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (1119:36)>, stride is 2   [ /usr/include/c++/8/complex(1119,36) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.058
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 6.430 
   remark #15478: estimated potential speedup: 1.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(255,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.857
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 6.430 
   remark #15478: estimated potential speedup: 1.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(258,3)
   remark #15382: vectorization support: call to function xy2d(int, int, int) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(265,13) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(289,3)
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (1119:36)>, stride is 2   [ /usr/include/c++/8/complex(1119,36) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.058
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 6.430 
   remark #15478: estimated potential speedup: 1.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(289,3)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.857
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 6.430 
   remark #15478: estimated potential speedup: 1.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(292,3)
   remark #15382: vectorization support: call to function xy2d(int, int, int) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(299,13) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(362,3)
   remark #15382: vectorization support: call to function encode(unsigned short, unsigned short) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(374,13) ]
   remark #15382: vectorization support: call to function encode(unsigned short, unsigned short) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(376,13) ]
   remark #15382: vectorization support: call to function xy2d(int, int, int) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(379,13) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(408,3)
   remark #15382: vectorization support: call to function encode(unsigned short, unsigned short) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(420,13) ]
   remark #15382: vectorization support: call to function encode(unsigned short, unsigned short) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(422,13) ]
   remark #15382: vectorization support: call to function xy2d(int, int, int) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(425,13) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(454,5)
   remark #15382: vectorization support: call to function findlength(float, float, float *, float *) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(467,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between domain[0] (460:9) and domain (467:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between domain (467:9) and domain[0] (460:9)

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(458,7)
      remark #15523: loop was not vectorized: loop control variable tile was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(501,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between rayrecvstart[p] (503:7) and rayrecvlist[*(rayrecvstart+p*4)+k] (503:7)
   remark #15346: vector dependence: assumed FLOW dependence between rayrecvlist[*(rayrecvstart+p*4)+k] (503:7) and rayrecvstart[p] (503:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(501,5)
<Remainder>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(511,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(511,3)
   remark #15388: vectorization support: reference raycoorinc[k] has aligned access   [ MemXCT-CPU/src/main.cpp(513,5) ]
   remark #15389: vectorization support: reference rayrecvlist[k] has unaligned access   [ MemXCT-CPU/src/main.cpp(513,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <raycoor[*(rayrecvlist+k*4)]>, part of index is read from memory   [ MemXCT-CPU/src/main.cpp(513,21) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.448
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 3.620 
   remark #15478: estimated potential speedup: 3.670 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(511,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference raycoorinc[k] has aligned access   [ MemXCT-CPU/src/main.cpp(513,5) ]
   remark #15389: vectorization support: reference rayrecvlist[k] has unaligned access   [ MemXCT-CPU/src/main.cpp(513,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.300
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 3.620 
   remark #15478: estimated potential speedup: 3.670 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(529,19)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(523,5)
      remark #15382: vectorization support: call to function findnumpix(float, float, float *, int *) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(536,9) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between domain[0] (529:9) and domain (536:9)
      remark #15346: vector dependence: assumed OUTPUT dependence between domain (536:9) and domain[0] (529:9)

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(527,7)
         remark #15523: loop was not vectorized: loop control variable tile was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(568,58)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(553,5)
      remark #15382: vectorization support: call to function findpixind(float, float, float *, int *, int, int *) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(568,9) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between domain[0] (559:9) and domain (568:9)
      remark #15346: vector dependence: assumed OUTPUT dependence between domain (568:9) and domain[0] (559:9)

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(557,7)
         remark #15523: loop was not vectorized: loop control variable tile was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(585,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(586,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(586,7)
      remark #15388: vectorization support: reference csrRowInd has aligned access   [ MemXCT-CPU/src/main.cpp(587,9) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 3.640 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(586,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(588,5)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(588,5)
      remark #15389: vectorization support: reference inter has unaligned access   [ MemXCT-CPU/src/main.cpp(590,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(588,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(591,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between inter (593:7) and inter (594:7)
   remark #15346: vector dependence: assumed FLOW dependence between inter (594:7) and inter (593:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(597,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(598,7)
   <Multiversioned v1>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between inter (599:9) and inter (599:9)
      remark #15346: vector dependence: assumed ANTI dependence between inter (599:9) and inter (599:9)
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(598,7)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(598,7)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(598,7)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(614,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between proj_rowindex[n] (616:7) and rowindex (616:7)
   remark #15346: vector dependence: assumed FLOW dependence between rowindex (616:7) and proj_rowindex[n] (616:7)
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(641,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(642,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(643,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(643,9)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(643,9)
            remark #15388: vectorization support: reference numint[n] has aligned access   [ MemXCT-CPU/src/main.cpp(644,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 3.333
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 3 
            remark #15477: vector cost: 0.750 
            remark #15478: estimated potential speedup: 1.940 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(643,9)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(645,9)
         remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(646,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between *rowindex[n] (647:13) and numint[*(*rowindex+n*4)] (647:13)
            remark #15346: vector dependence: assumed FLOW dependence between numint[*(*rowindex+n*4)] (647:13) and *rowindex[n] (647:13)
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(646,11)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(649,9)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(649,9)
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 1.864
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 19 
         remark #15477: vector cost: 2.750 
         remark #15478: estimated potential speedup: 6.120 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(649,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(672,7)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(672,7)
      remark #15389: vectorization support: reference buffmapnz has unaligned access   [ MemXCT-CPU/src/main.cpp(674,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(672,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(675,7)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(675,7)
      remark #15389: vectorization support: reference buffnz has unaligned access   [ MemXCT-CPU/src/main.cpp(677,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(675,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(678,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(679,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(680,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(680,9)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(680,9)
            remark #15388: vectorization support: reference numint[n] has aligned access   [ MemXCT-CPU/src/main.cpp(681,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 3.333
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 3 
            remark #15477: vector cost: 0.750 
            remark #15478: estimated potential speedup: 1.940 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(680,9)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(682,9)
         remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(683,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between *rowindex[n] (684:13) and numint[*(*rowindex+n*4)] (684:13)
            remark #15346: vector dependence: assumed FLOW dependence between numint[*(*rowindex+n*4)] (684:13) and *rowindex[n] (684:13)
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(683,11)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(686,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between *buffmapnz[buff] (689:13) and *buffmapnz[buff] (689:13)
         remark #15346: vector dependence: assumed ANTI dependence between *buffmapnz[buff] (689:13) and *buffmapnz[buff] (689:13)
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(695,9)
         remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(696,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between *buffnz[(*(numint+(*(*rowindex+n*4))*4))*blocksize+?] (697:13) and *buffnz[(*(numint+(*(*rowindex+n*4))*4))*blocksize+?] (697:13)
            remark #15346: vector dependence: assumed ANTI dependence between *buffnz[(*(numint+(*(*rowindex+n*4))*4))*blocksize+?] (697:13) and *buffnz[(*(numint+(*(*rowindex+n*4))*4))*blocksize+?] (697:13)
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(696,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(726,7)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(726,7)
      remark #15389: vectorization support: reference buffmapnz has unaligned access   [ MemXCT-CPU/src/main.cpp(728,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(726,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(729,7)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(729,7)
      remark #15389: vectorization support: reference buffnz has unaligned access   [ MemXCT-CPU/src/main.cpp(731,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(729,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(732,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(733,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(734,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(734,9)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(734,9)
            remark #15388: vectorization support: reference numint[n] has aligned access   [ MemXCT-CPU/src/main.cpp(735,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 3.333
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 3 
            remark #15477: vector cost: 0.750 
            remark #15478: estimated potential speedup: 1.940 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(734,9)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(736,9)
         remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(737,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between *rowindex[n] (738:13) and numint[*(*rowindex+n*4)] (738:13)
            remark #15346: vector dependence: assumed FLOW dependence between numint[*(*rowindex+n*4)] (738:13) and *rowindex[n] (738:13)
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(737,11)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(740,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between *buffmapnz[buff] (744:13) and *buffmapnz[buff] (745:13)
         remark #15346: vector dependence: assumed FLOW dependence between *buffmapnz[buff] (745:13) and *buffmapnz[buff] (744:13)
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(750,9)
         remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(751,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between *buffnz[ind] (753:13) and *buffnz[ind] (754:13)
            remark #15346: vector dependence: assumed FLOW dependence between *buffnz[ind] (754:13) and *buffnz[ind] (753:13)
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(790,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(791,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(792,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(792,9)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(792,9)
            remark #15388: vectorization support: reference numint[n] has aligned access   [ MemXCT-CPU/src/main.cpp(793,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 3.333
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 3 
            remark #15477: vector cost: 0.750 
            remark #15478: estimated potential speedup: 1.940 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(792,9)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(794,9)
         remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(795,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between *rowindex[n] (796:13) and numint[*(*rowindex+n*4)] (796:13)
            remark #15346: vector dependence: assumed FLOW dependence between numint[*(*rowindex+n*4)] (796:13) and *rowindex[n] (796:13)
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(795,11)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(798,9)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(798,9)
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 1.864
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 19 
         remark #15477: vector cost: 2.750 
         remark #15478: estimated potential speedup: 6.120 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(798,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(821,7)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(821,7)
      remark #15389: vectorization support: reference buffmapnz has unaligned access   [ MemXCT-CPU/src/main.cpp(823,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(821,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(824,7)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(824,7)
      remark #15389: vectorization support: reference buffnz has unaligned access   [ MemXCT-CPU/src/main.cpp(826,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(824,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(827,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(828,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(829,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(829,9)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(829,9)
            remark #15388: vectorization support: reference numint[n] has aligned access   [ MemXCT-CPU/src/main.cpp(830,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 3.333
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 3 
            remark #15477: vector cost: 0.750 
            remark #15478: estimated potential speedup: 1.940 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(829,9)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(831,9)
         remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(832,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between *rowindex[n] (833:13) and numint[*(*rowindex+n*4)] (833:13)
            remark #15346: vector dependence: assumed FLOW dependence between numint[*(*rowindex+n*4)] (833:13) and *rowindex[n] (833:13)
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(832,11)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(835,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between *buffmapnz[buff] (838:13) and *buffmapnz[buff] (838:13)
         remark #15346: vector dependence: assumed ANTI dependence between *buffmapnz[buff] (838:13) and *buffmapnz[buff] (838:13)
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(844,9)
         remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(845,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between *buffnz[(*(numint+(*(*rowindex+n*4))*4))*blocksize+?] (846:13) and *buffnz[(*(numint+(*(*rowindex+n*4))*4))*blocksize+?] (846:13)
            remark #15346: vector dependence: assumed ANTI dependence between *buffnz[(*(numint+(*(*rowindex+n*4))*4))*blocksize+?] (846:13) and *buffnz[(*(numint+(*(*rowindex+n*4))*4))*blocksize+?] (846:13)
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(845,11)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(875,7)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(875,7)
      remark #15389: vectorization support: reference buffmapnz has unaligned access   [ MemXCT-CPU/src/main.cpp(877,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(875,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(878,7)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(878,7)
      remark #15389: vectorization support: reference buffnz has unaligned access   [ MemXCT-CPU/src/main.cpp(880,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(878,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(881,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(882,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(883,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(883,9)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(883,9)
            remark #15388: vectorization support: reference numint[n] has aligned access   [ MemXCT-CPU/src/main.cpp(884,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 3.333
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 3 
            remark #15477: vector cost: 0.750 
            remark #15478: estimated potential speedup: 1.940 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(883,9)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(885,9)
         remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(886,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between *rowindex[n] (887:13) and numint[*(*rowindex+n*4)] (887:13)
            remark #15346: vector dependence: assumed FLOW dependence between numint[*(*rowindex+n*4)] (887:13) and *rowindex[n] (887:13)
         LOOP END

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(886,11)
         <Remainder>
         LOOP END
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(889,9)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between *buffmapnz[buff] (893:13) and *buffmapnz[buff] (894:13)
         remark #15346: vector dependence: assumed FLOW dependence between *buffmapnz[buff] (894:13) and *buffmapnz[buff] (893:13)
      LOOP END

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(899,9)
         remark #15523: loop was not vectorized: loop control variable m was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(900,11)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed ANTI dependence between *buffnz[ind] (902:13) and *buffnz[ind] (903:13)
            remark #15346: vector dependence: assumed FLOW dependence between *buffnz[ind] (903:13) and *buffnz[ind] (902:13)
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(929,5)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(929,5)
      remark #15389: vectorization support: reference proj_buffvalue[n] has unaligned access   [ MemXCT-CPU/src/main.cpp(931,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.250
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.460 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(929,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(942,23)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(933,5)
      remark #15382: vectorization support: call to function findlength(float, float, float *, float *) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(946,13) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between domain[0] (942:13) and domain (946:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between domain (946:13) and domain[0] (942:13)

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(934,7)
         remark #15523: loop was not vectorized: loop control variable k was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(937,9)
            remark #15523: loop was not vectorized: loop control variable buff was found, but loop iteration count cannot be computed before executing the loop

            LOOP BEGIN at MemXCT-CPU/src/main.cpp(939,11)
               remark #15523: loop was not vectorized: loop control variable n was found, but loop iteration count cannot be computed before executing the loop
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(956,5)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(956,5)
      remark #15389: vectorization support: reference back_buffvalue[n] has unaligned access   [ MemXCT-CPU/src/main.cpp(958,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.250
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.460 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(956,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(972,27)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(960,5)
      remark #15382: vectorization support: call to function findlength(float, float, float *, float *) cannot be vectorized   [ MemXCT-CPU/src/main.cpp(973,13) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between domain[0] (963:9) and domain (973:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between domain (973:13) and domain[0] (963:9)

      LOOP BEGIN at MemXCT-CPU/src/main.cpp(961,7)
         remark #15523: loop was not vectorized: loop control variable n was found, but loop iteration count cannot be computed before executing the loop

         LOOP BEGIN at MemXCT-CPU/src/main.cpp(967,9)
            remark #15523: loop was not vectorized: loop control variable buff was found, but loop iteration count cannot be computed before executing the loop

            LOOP BEGIN at MemXCT-CPU/src/main.cpp(969,11)
               remark #15523: loop was not vectorized: loop control variable k was found, but loop iteration count cannot be computed before executing the loop
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(984,3)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(984,3)
      remark #15389: vectorization support: reference raynumray has unaligned access   [ MemXCT-CPU/src/main.cpp(986,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(984,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(994,3)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(994,3)
      remark #15389: vectorization support: reference raynumray has unaligned access   [ MemXCT-CPU/src/main.cpp(995,36) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.840 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(994,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1047,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1047,3)
   remark #15388: vectorization support: reference mes has aligned access   [ MemXCT-CPU/src/main.cpp(1049,24) ]
   remark #15389: vectorization support: reference raymesind has unaligned access   [ MemXCT-CPU/src/main.cpp(1049,41) ]
   remark #15388: vectorization support: reference mes has aligned access   [ MemXCT-CPU/src/main.cpp(1050,10) ]
   remark #15388: vectorization support: reference mes has aligned access   [ MemXCT-CPU/src/main.cpp(1050,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <mesdata>, masked, part of index is read from memory   [ MemXCT-CPU/src/main.cpp(1049,33) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.080
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15455: masked aligned unit stride stores: 1 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 25 
   remark #15477: vector cost: 20.250 
   remark #15478: estimated potential speedup: 1.220 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1047,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1077,3)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(1077,3)
      remark #15389: vectorization support: reference obj has unaligned access   [ MemXCT-CPU/src/main.cpp(1079,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.250
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.460 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(1077,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1182,3)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(1182,3)
      remark #15389: vectorization support: reference objall has unaligned access   [ MemXCT-CPU/src/main.cpp(1184,5) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.250
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.460 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(1182,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1185,3)
   remark #15389: vectorization support: reference pixglobalind has unaligned access   [ MemXCT-CPU/src/main.cpp(1187,12) ]
   remark #15389: vectorization support: reference obj has unaligned access   [ MemXCT-CPU/src/main.cpp(1187,31) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <objall>, part of index is read from memory   [ MemXCT-CPU/src/main.cpp(1187,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.125
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 12.000 
   remark #15478: estimated potential speedup: 0.580 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1185,3)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: subtract_kernel(float *, float *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1226,3)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1226,3)
<Multiversioned v1>
   remark #15388: vectorization support: reference a[n] has aligned access   [ MemXCT-CPU/src/main.cpp(1228,5) ]
   remark #15389: vectorization support: reference b[n] has unaligned access   [ MemXCT-CPU/src/main.cpp(1228,12) ]
   remark #15389: vectorization support: reference c[n] has unaligned access   [ MemXCT-CPU/src/main.cpp(1228,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.889
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 2.250 
   remark #15478: estimated potential speedup: 3.360 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1226,3)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1226,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1226,3)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: saxpy_kernel(float *, float *, float, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1216,3)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1216,3)
<Multiversioned v1>
   remark #15388: vectorization support: reference a[n] has aligned access   [ MemXCT-CPU/src/main.cpp(1218,5) ]
   remark #15389: vectorization support: reference b[n] has unaligned access   [ MemXCT-CPU/src/main.cpp(1218,12) ]
   remark #15389: vectorization support: reference c[n] has unaligned access   [ MemXCT-CPU/src/main.cpp(1218,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.526
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 2.370 
   remark #15478: estimated potential speedup: 3.640 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1216,3)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15388: vectorization support: reference a[n] has aligned access   [ MemXCT-CPU/src/main.cpp(1218,5) ]
   remark #15389: vectorization support: reference b[n] has unaligned access   [ MemXCT-CPU/src/main.cpp(1218,12) ]
   remark #15389: vectorization support: reference c[n] has unaligned access   [ MemXCT-CPU/src/main.cpp(1218,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.636
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1216,3)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1216,3)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: norm_kernel(float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1203,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1203,3)
   remark #15388: vectorization support: reference a[n] has aligned access   [ MemXCT-CPU/src/main.cpp(1205,20) ]
   remark #15388: vectorization support: reference a[n] has aligned access   [ MemXCT-CPU/src/main.cpp(1205,20) ]
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 4.643
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 5.810 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1203,3)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a[n] has aligned access   [ MemXCT-CPU/src/main.cpp(1205,20) ]
   remark #15388: vectorization support: reference a[n] has aligned access   [ MemXCT-CPU/src/main.cpp(1205,20) ]
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 9.286
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 5.810 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: dot_kernel(float *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1210,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1210,3)
   remark #15389: vectorization support: reference a[n] has unaligned access   [ MemXCT-CPU/src/main.cpp(1212,15) ]
   remark #15388: vectorization support: reference b[n] has aligned access   [ MemXCT-CPU/src/main.cpp(1212,20) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.615
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 1.620 
   remark #15478: estimated potential speedup: 3.790 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1210,3)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference a[n] has unaligned access   [ MemXCT-CPU/src/main.cpp(1212,15) ]
   remark #15388: vectorization support: reference b[n] has aligned access   [ MemXCT-CPU/src/main.cpp(1212,20) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 5.231
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 8 
   remark #15477: vector cost: 1.620 
   remark #15478: estimated potential speedup: 3.790 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: __$U0

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: __$U1

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: __$U2

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: __$U3

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: __$U4

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: __$U5

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: __$U6

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: __$U7

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference __p1->_M_value has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.000
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 6.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at MemXCT-CPU/src/main.cpp(1200,1)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: copy_kernel(float *, float *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at MemXCT-CPU/src/main.cpp(1221,3)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(1221,3)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at MemXCT-CPU/src/main.cpp(1221,3)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END
===========================================================================
